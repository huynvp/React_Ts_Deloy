{"version":3,"file":"static/js/812.03d07818.chunk.js","mappings":"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","sources":["components/tool/test/JsonViewerComponent.tsx","components/tool/task/workflow/document/ViewResponseComponent.tsx","components/tool/task/workflow/document/ExecuteApiComponent.tsx","components/tool/task/workflow/document/ModifyApiDocComponent.tsx"],"sourcesContent":["import ReactJson from \"react-json-view\";\r\n\r\nexport default function JsonViewerComponent(props: any) {\r\n\r\n    return (\r\n        <div>\r\n            <ReactJson\r\n                name={null}\r\n                enableClipboard={false}\r\n                displayDataTypes={false}\r\n                src={props.data}\r\n                theme=\"ashes\" />\r\n        </div>\r\n    )\r\n}","import { Col, Drawer, Row } from \"antd\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Fn } from \"../../../../../helper/function\";\r\nimport { ApiDocResponseService } from \"../../../../../services/taskService\";\r\nimport { Box } from \"../../../../core/MyBox\";\r\nimport { MyButton } from \"../../../../core/MyButton\";\r\nimport { Text, TextStrong } from \"../../../../core/Text\";\r\nimport JsonViewerComponent from \"../../../test/JsonViewerComponent\";\r\n\r\nexport default function ViewResponseComponent(props: any) {\r\n    const [data, setData] = useState([]);\r\n\r\n    const { projectKey, folderKey, apiKey, visible, setVisible, isLoading, setIsLoading } = props;\r\n\r\n    const loadDataDetail = useCallback(() => {\r\n        if (visible) {\r\n            ApiDocResponseService.Getlist(projectKey, folderKey, apiKey)\r\n                .then((rs: any) => {\r\n                    if (rs.isSuccess) {\r\n                        setData(rs.data.pagedData);\r\n                    }\r\n                })\r\n        }\r\n    }, [projectKey, folderKey, apiKey, visible]);\r\n\r\n    useEffect(() => {\r\n        loadDataDetail();\r\n    }, [loadDataDetail])\r\n\r\n    function handleOnClose() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleClickDelete(key: string | undefined) {\r\n        Swal.fire({\r\n            title: \"Xác nhận xóa\",\r\n            text: \"Bạn có muốn xóa response này không?\",\r\n        })\r\n            .then((rs) => {\r\n                if (rs.isConfirmed) {\r\n                    DoDelete(key);\r\n                }\r\n            })\r\n    }\r\n\r\n    function DoDelete(key: string | undefined) {\r\n        setIsLoading(true);\r\n        ApiDocResponseService.GetDetail(projectKey, folderKey, apiKey, key)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    ApiDocResponseService.Delete(projectKey, folderKey, apiKey, key, Fn.GetTimestampV2(rs))\r\n                        .then((rs: any) => {\r\n                            if (rs.isSuccess) {\r\n                                Fn.PrintMsgSuccessV2(rs);\r\n                                loadDataDetail();\r\n                            }\r\n                        }).finally(() => setIsLoading(false));\r\n                } else setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    function RenderData() {\r\n        return data.map((data: any, index: number) =>\r\n            <Box key={index}>\r\n                <Row>\r\n                    <Col span={12}>\r\n                        <Text>\r\n                            <TextStrong value=\"Name: \" />{data.name}\r\n                        </Text>\r\n                    </Col>\r\n                    <Col span={12} style={{ textAlign: \"right\" }}>\r\n                        <MyButton\r\n                            type=\"danger\"\r\n                            value=\"Xóa\"\r\n                            isLoading={isLoading}\r\n                            onClick={() => { handleClickDelete(data.key) }} />\r\n                    </Col>\r\n                </Row>\r\n                <JsonViewerComponent data={data.responses} />\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            size=\"large\"\r\n            title=\"Response\"\r\n            open={visible}\r\n            onClose={handleOnClose}>\r\n            {RenderData()}\r\n        </Drawer>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Fn } from \"../../../../../helper/function\";\r\nimport { ApiDocResponseService, ApiDocService } from \"../../../../../services/taskService\";\r\nimport { Box } from \"../../../../core/MyBox\";\r\nimport { MyButton } from \"../../../../core/MyButton\";\r\nimport JsonViewerComponent from \"../../../test/JsonViewerComponent\";\r\nimport \"../../task.css\";\r\nimport ViewResponseComponent from \"./ViewResponseComponent\";\r\n\r\nexport default function ExecuteApiComponent(props: any) {\r\n    const { projectKey, folderKey, apiKey } = props;\r\n    const [statusCode, setStatusCode] = useState('');\r\n    const [response, setResponse] = useState({});\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const { isLoading, setIsLoading } = props;\r\n\r\n    function OnClickExec() {\r\n        setIsLoading(true);\r\n        ApiDocService.ExecApi(projectKey, folderKey, apiKey)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    console.log(rs.data);\r\n                    setStatusCode(rs.data.result.statusCode);\r\n                    setResponse(rs.data.result.data);\r\n                }\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n\r\n    function handleClickSaveResponse() {\r\n        Swal.fire({\r\n            title: \"Nhập tên response\",\r\n            input: \"text\",\r\n            preConfirm: (name) => {\r\n                saveResponse(name);\r\n            }\r\n        })\r\n    }\r\n\r\n    function saveResponse(name: string) {\r\n        let body = {\r\n            name: name,\r\n            responses: response\r\n        }\r\n        ApiDocResponseService.SaveResponse(projectKey, folderKey, apiKey, body)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    Fn.PrintMsgSuccessV2(rs);\r\n                }\r\n            })\r\n    }\r\n\r\n    function handleClickViewResponse() {\r\n        setVisible(true);\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <MyButton\r\n                isLoading={isLoading}\r\n                value=\"Xem response đã lưu\"\r\n                type=\"primary\"\r\n                onClick={handleClickViewResponse}\r\n            />\r\n            <MyButton\r\n                isLoading={isLoading}\r\n                value=\"Chạy APi\"\r\n                type=\"warning\"\r\n                onClick={OnClickExec}\r\n            />\r\n            <MyButton\r\n                isLoading={isLoading}\r\n                disabled={statusCode === ''}\r\n                value=\"Lưu response\"\r\n                onClick={handleClickSaveResponse}\r\n                type=\"success\" />\r\n            <p>Status code: {statusCode}</p>\r\n            <pre>\r\n                <JsonViewerComponent data={response} />\r\n            </pre>\r\n\r\n            <ViewResponseComponent\r\n                visible={visible}\r\n                setVisible={setVisible}\r\n                projectKey={projectKey}\r\n                folderKey={folderKey}\r\n                apiKey={apiKey}\r\n                isLoading={isLoading}\r\n                setIsLoading={setIsLoading} />\r\n        </Box>\r\n    );\r\n}","import { Form } from \"antd\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Fn } from \"../../../../../helper/function\";\r\nimport { ApiDocService } from \"../../../../../services/taskService\";\r\nimport { MyFormItem } from \"../../../../core/Input\";\r\nimport { MyBox } from \"../../../../core/MyBox\";\r\nimport { MyButton } from \"../../../../core/MyButton\";\r\nimport ExecuteApiComponent from \"./ExecuteApiComponent\";\r\nimport HeaderComponent from \"./HeaderComponent\";\r\n\r\nexport default function ModifyApiDocComponent(props: any) {\r\n    const key = useParams().key;\r\n    const projectKey = useParams().projectKey;\r\n    const folderKey = useParams().folderKey;\r\n    const navigate = useNavigate();\r\n    const [headers, setHeaders] = useState([]);\r\n    const [name, setName] = useState('');\r\n    const [method, setMethod] = useState(1);\r\n    const [url, setUrl] = useState('');\r\n    const [body, setBody] = useState<string>('');\r\n    const [varReplace, setVarReplace] = useState();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const options = [\r\n        {\r\n            value: 1,\r\n            label: \"Get\"\r\n        },\r\n        {\r\n            value: 2,\r\n            label: \"Post\"\r\n        },\r\n        {\r\n            value: 3,\r\n            label: \"Put\"\r\n        },\r\n        {\r\n            value: 4,\r\n            label: \"Delete\"\r\n        }\r\n    ]\r\n\r\n    const [bodyObj, setBodyObj] = useState();\r\n\r\n    function isJSON(str: string) {\r\n        try {\r\n            return (JSON.parse(str) && !!str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const loadData = useCallback(async () => {\r\n        if (key !== undefined) {\r\n            setIsLoading(true);\r\n\r\n            ApiDocService.GetDetail(projectKey, folderKey, key)\r\n                .then((rs: any) => {\r\n                    if (rs.isSuccess) {\r\n                        let row = rs.data;\r\n                        setHeaders(row.headers);\r\n                        setName(row.name);\r\n                        setMethod(row.method);\r\n                        setUrl(row.url);\r\n                        setVarReplace(row.varReplace);\r\n                        setBody(row.body === null ? \"\" : JSON.stringify(row.body));\r\n                        setBodyObj(row.body);\r\n                    }\r\n                })\r\n                .finally(() => setIsLoading(false));\r\n        }\r\n    }, [projectKey, folderKey, key, setIsLoading])\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, [loadData])\r\n\r\n    function handleOnChangeBody(value: string) {\r\n        if (isJSON(value)) {\r\n            setBodyObj(JSON.parse(value));\r\n        }\r\n        setBody(value);\r\n    }\r\n\r\n    function filterArray() {\r\n        var t = headers;\r\n\r\n        t = t.filter((obj: any) => {\r\n            return (obj !== undefined && obj.key !== '');\r\n        })\r\n\r\n        return t;\r\n    }\r\n\r\n    function handleSubmitForm() {\r\n        setIsLoading(true);\r\n        let bodyReq = {\r\n            name: name,\r\n            headers: filterArray(),\r\n            url: url,\r\n            method: method,\r\n            varReplace: varReplace,\r\n            body: bodyObj\r\n        };\r\n\r\n        if (key === undefined) {\r\n            add(bodyReq);\r\n        } else {\r\n            edit(bodyReq);\r\n        }\r\n    }\r\n\r\n    function add(bodyReq: any) {\r\n        ApiDocService.Add(projectKey, folderKey, bodyReq)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    Fn.PrintMsgSuccessV2(rs);\r\n                    navigate(`/tools/tasks/projects/${projectKey}/codeManage/document/${folderKey}/apis/${rs.data.key}`);\r\n                }\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n\r\n    function edit(bodyReq: any) {\r\n        ApiDocService.GetDetail(projectKey, folderKey, key)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    bodyReq = Fn.GetTimestampV2(rs, bodyReq);\r\n                    ApiDocService.Edit(projectKey, folderKey, key, bodyReq)\r\n                        .then((rs: any) => {\r\n                            if (rs.isSuccess) {\r\n                                Fn.PrintMsgSuccessV2(rs);\r\n                            }\r\n                        })\r\n                        .finally(() => setIsLoading(false));\r\n                } else setIsLoading(false);\r\n            })\r\n    }\r\n\r\n    function handleDelete() {\r\n        Swal.fire(\"Xác nhận xóa\", \"Bạn có muốn xóa dữ liệu không?\", \"question\")\r\n            .then((result) => {\r\n                if (result.isConfirmed) {\r\n                    doDelete();\r\n                }\r\n            });\r\n    }\r\n\r\n    function doDelete() {\r\n        setIsLoading(true);\r\n        ApiDocService.GetDetail(projectKey, folderKey, key)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    ApiDocService.Delete(projectKey, folderKey, key, Fn.GetTimestampV2(rs))\r\n                        .then((rs: any) => {\r\n                            if (rs.isSuccess) {\r\n                                Fn.PrintMsgSuccessV2(rs);\r\n                                navigate(`/tools/tasks/projects/${projectKey}/codeManage/document?folder=${folderKey}`);\r\n                            }\r\n                        })\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <MyBox\r\n            title={key !== undefined ? \"Chi tiết API\" : \"Thêm mới API\"}>\r\n            <Form\r\n                layout=\"vertical\"\r\n                onSubmitCapture={handleSubmitForm}>\r\n                <MyFormItem.Input\r\n                    label=\"Tên\"\r\n                    value={name}\r\n                    setValue={setName} />\r\n\r\n                <MyFormItem.Select\r\n                    label=\"Phương thức\"\r\n                    options={options}\r\n                    value={method}\r\n                    setValue={setMethod} />\r\n\r\n                <MyFormItem.Input\r\n                    label=\"URL\"\r\n                    value={url}\r\n                    setValue={setUrl} />\r\n\r\n                <HeaderComponent\r\n                    data={headers}\r\n                    setData={setHeaders} />\r\n\r\n                <MyFormItem.TextArea\r\n                    label=\"Body\"\r\n                    value={body}\r\n                    setValue={(value: string) => {\r\n                        handleOnChangeBody(value);\r\n                    }} />\r\n\r\n                <MyFormItem.TextArea\r\n                    label=\"Script lưu biến \"\r\n                    value={varReplace}\r\n                    setValue={setVarReplace} />\r\n\r\n                <MyButton\r\n                    htmlType=\"submit\"\r\n                    isLoading={isLoading}\r\n                    type=\"success\"\r\n                    value={key === undefined ? \"Thêm mới\" : \"Chỉnh sửa\"} />\r\n\r\n                <MyButton\r\n                    type=\"danger\"\r\n                    isLoading={isLoading}\r\n                    onClick={handleDelete}\r\n                    disabled={key === undefined}\r\n                    value=\"Xóa\" />\r\n            </Form>\r\n\r\n            <ExecuteApiComponent\r\n                isLoading={isLoading}\r\n                setIsLoading={setIsLoading}\r\n                projectKey={projectKey}\r\n                folderKey={folderKey}\r\n                apiKey={key} />\r\n        </MyBox>\r\n    )\r\n}"],"names":["JsonViewerComponent","props","name","enableClipboard","displayDataTypes","src","data","theme","ViewResponseComponent","useState","setData","projectKey","folderKey","apiKey","visible","setVisible","isLoading","setIsLoading","loadDataDetail","useCallback","ApiDocResponseService","then","rs","isSuccess","pagedData","handleClickDelete","key","Swal","title","text","isConfirmed","Fn","finally","DoDelete","useEffect","size","open","onClose","map","index","span","Text","value","style","textAlign","MyButton","type","onClick","responses","ExecuteApiComponent","statusCode","setStatusCode","response","setResponse","ApiDocService","console","log","result","disabled","input","preConfirm","body","saveResponse","ModifyApiDocComponent","useParams","navigate","useNavigate","headers","setHeaders","setName","method","setMethod","url","setUrl","setBody","varReplace","setVarReplace","bodyObj","setBodyObj","loadData","undefined","row","JSON","stringify","handleOnChangeBody","str","parse","e","isJSON","filterArray","t","filter","obj","MyBox","layout","onSubmitCapture","bodyReq","add","edit","label","setValue","options","HeaderComponent","htmlType"],"sourceRoot":""}