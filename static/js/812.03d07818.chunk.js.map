{"version":3,"file":"static/js/812.03d07818.chunk.js","mappings":"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","sources":["components/tool/test/JsonViewerComponent.tsx","components/tool/task/workflow/document/ViewResponseComponent.tsx","components/tool/task/workflow/document/ExecuteApiComponent.tsx","components/tool/task/workflow/document/ModifyApiDocComponent.tsx"],"sourcesContent":["import ReactJson from \"react-json-view\";\n\nexport default function JsonViewerComponent(props: any) {\n\n    return (\n        <div>\n            <ReactJson\n                name={null}\n                enableClipboard={false}\n                displayDataTypes={false}\n                src={props.data}\n                theme=\"ashes\" />\n        </div>\n    )\n}","import { Col, Drawer, Row } from \"antd\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { Fn } from \"../../../../../helper/function\";\nimport { ApiDocResponseService } from \"../../../../../services/taskService\";\nimport { Box } from \"../../../../core/MyBox\";\nimport { MyButton } from \"../../../../core/MyButton\";\nimport { Text, TextStrong } from \"../../../../core/Text\";\nimport JsonViewerComponent from \"../../../test/JsonViewerComponent\";\n\nexport default function ViewResponseComponent(props: any) {\n    const [data, setData] = useState([]);\n\n    const { projectKey, folderKey, apiKey, visible, setVisible, isLoading, setIsLoading } = props;\n\n    const loadDataDetail = useCallback(() => {\n        if (visible) {\n            ApiDocResponseService.Getlist(projectKey, folderKey, apiKey)\n                .then((rs: any) => {\n                    if (rs.isSuccess) {\n                        setData(rs.data.pagedData);\n                    }\n                })\n        }\n    }, [projectKey, folderKey, apiKey, visible]);\n\n    useEffect(() => {\n        loadDataDetail();\n    }, [loadDataDetail])\n\n    function handleOnClose() {\n        setVisible(false);\n    }\n\n    function handleClickDelete(key: string | undefined) {\n        Swal.fire({\n            title: \"Xác nhận xóa\",\n            text: \"Bạn có muốn xóa response này không?\",\n        })\n            .then((rs) => {\n                if (rs.isConfirmed) {\n                    DoDelete(key);\n                }\n            })\n    }\n\n    function DoDelete(key: string | undefined) {\n        setIsLoading(true);\n        ApiDocResponseService.GetDetail(projectKey, folderKey, apiKey, key)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    ApiDocResponseService.Delete(projectKey, folderKey, apiKey, key, Fn.GetTimestampV2(rs))\n                        .then((rs: any) => {\n                            if (rs.isSuccess) {\n                                Fn.PrintMsgSuccessV2(rs);\n                                loadDataDetail();\n                            }\n                        }).finally(() => setIsLoading(false));\n                } else setIsLoading(false);\n            });\n    }\n\n    function RenderData() {\n        return data.map((data: any, index: number) =>\n            <Box key={index}>\n                <Row>\n                    <Col span={12}>\n                        <Text>\n                            <TextStrong value=\"Name: \" />{data.name}\n                        </Text>\n                    </Col>\n                    <Col span={12} style={{ textAlign: \"right\" }}>\n                        <MyButton\n                            type=\"danger\"\n                            value=\"Xóa\"\n                            isLoading={isLoading}\n                            onClick={() => { handleClickDelete(data.key) }} />\n                    </Col>\n                </Row>\n                <JsonViewerComponent data={data.responses} />\n            </Box>\n        )\n    }\n\n    return (\n        <Drawer\n            size=\"large\"\n            title=\"Response\"\n            open={visible}\n            onClose={handleOnClose}>\n            {RenderData()}\n        </Drawer>\n    )\n}","import { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { Fn } from \"../../../../../helper/function\";\nimport { ApiDocResponseService, ApiDocService } from \"../../../../../services/taskService\";\nimport { Box } from \"../../../../core/MyBox\";\nimport { MyButton } from \"../../../../core/MyButton\";\nimport JsonViewerComponent from \"../../../test/JsonViewerComponent\";\nimport \"../../task.css\";\nimport ViewResponseComponent from \"./ViewResponseComponent\";\n\nexport default function ExecuteApiComponent(props: any) {\n    const { projectKey, folderKey, apiKey } = props;\n    const [statusCode, setStatusCode] = useState('');\n    const [response, setResponse] = useState({});\n    const [visible, setVisible] = useState(false);\n\n    const { isLoading, setIsLoading } = props;\n\n    function OnClickExec() {\n        setIsLoading(true);\n        ApiDocService.ExecApi(projectKey, folderKey, apiKey)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    console.log(rs.data);\n                    setStatusCode(rs.data.result.statusCode);\n                    setResponse(rs.data.result.data);\n                }\n            })\n            .finally(() => setIsLoading(false));\n    }\n\n    function handleClickSaveResponse() {\n        Swal.fire({\n            title: \"Nhập tên response\",\n            input: \"text\",\n            preConfirm: (name) => {\n                saveResponse(name);\n            }\n        })\n    }\n\n    function saveResponse(name: string) {\n        let body = {\n            name: name,\n            responses: response\n        }\n        ApiDocResponseService.SaveResponse(projectKey, folderKey, apiKey, body)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    Fn.PrintMsgSuccessV2(rs);\n                }\n            })\n    }\n\n    function handleClickViewResponse() {\n        setVisible(true);\n    }\n\n    return (\n        <Box>\n            <MyButton\n                isLoading={isLoading}\n                value=\"Xem response đã lưu\"\n                type=\"primary\"\n                onClick={handleClickViewResponse}\n            />\n            <MyButton\n                isLoading={isLoading}\n                value=\"Chạy APi\"\n                type=\"warning\"\n                onClick={OnClickExec}\n            />\n            <MyButton\n                isLoading={isLoading}\n                disabled={statusCode === ''}\n                value=\"Lưu response\"\n                onClick={handleClickSaveResponse}\n                type=\"success\" />\n            <p>Status code: {statusCode}</p>\n            <pre>\n                <JsonViewerComponent data={response} />\n            </pre>\n\n            <ViewResponseComponent\n                visible={visible}\n                setVisible={setVisible}\n                projectKey={projectKey}\n                folderKey={folderKey}\n                apiKey={apiKey}\n                isLoading={isLoading}\n                setIsLoading={setIsLoading} />\n        </Box>\n    );\n}","import { Form } from \"antd\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport { Fn } from \"../../../../../helper/function\";\nimport { ApiDocService } from \"../../../../../services/taskService\";\nimport { MyFormItem } from \"../../../../core/Input\";\nimport { MyBox } from \"../../../../core/MyBox\";\nimport { MyButton } from \"../../../../core/MyButton\";\nimport ExecuteApiComponent from \"./ExecuteApiComponent\";\nimport HeaderComponent from \"./HeaderComponent\";\n\nexport default function ModifyApiDocComponent(props: any) {\n    const key = useParams().key;\n    const projectKey = useParams().projectKey;\n    const folderKey = useParams().folderKey;\n    const navigate = useNavigate();\n    const [headers, setHeaders] = useState([]);\n    const [name, setName] = useState('');\n    const [method, setMethod] = useState(1);\n    const [url, setUrl] = useState('');\n    const [body, setBody] = useState<string>('');\n    const [varReplace, setVarReplace] = useState();\n    const [isLoading, setIsLoading] = useState(false);\n\n    const options = [\n        {\n            value: 1,\n            label: \"Get\"\n        },\n        {\n            value: 2,\n            label: \"Post\"\n        },\n        {\n            value: 3,\n            label: \"Put\"\n        },\n        {\n            value: 4,\n            label: \"Delete\"\n        }\n    ]\n\n    const [bodyObj, setBodyObj] = useState();\n\n    function isJSON(str: string) {\n        try {\n            return (JSON.parse(str) && !!str);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    const loadData = useCallback(async () => {\n        if (key !== undefined) {\n            setIsLoading(true);\n\n            ApiDocService.GetDetail(projectKey, folderKey, key)\n                .then((rs: any) => {\n                    if (rs.isSuccess) {\n                        let row = rs.data;\n                        setHeaders(row.headers);\n                        setName(row.name);\n                        setMethod(row.method);\n                        setUrl(row.url);\n                        setVarReplace(row.varReplace);\n                        setBody(row.body === null ? \"\" : JSON.stringify(row.body));\n                        setBodyObj(row.body);\n                    }\n                })\n                .finally(() => setIsLoading(false));\n        }\n    }, [projectKey, folderKey, key, setIsLoading])\n\n    useEffect(() => {\n        loadData();\n    }, [loadData])\n\n    function handleOnChangeBody(value: string) {\n        if (isJSON(value)) {\n            setBodyObj(JSON.parse(value));\n        }\n        setBody(value);\n    }\n\n    function filterArray() {\n        var t = headers;\n\n        t = t.filter((obj: any) => {\n            return (obj !== undefined && obj.key !== '');\n        })\n\n        return t;\n    }\n\n    function handleSubmitForm() {\n        setIsLoading(true);\n        let bodyReq = {\n            name: name,\n            headers: filterArray(),\n            url: url,\n            method: method,\n            varReplace: varReplace,\n            body: bodyObj\n        };\n\n        if (key === undefined) {\n            add(bodyReq);\n        } else {\n            edit(bodyReq);\n        }\n    }\n\n    function add(bodyReq: any) {\n        ApiDocService.Add(projectKey, folderKey, bodyReq)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    Fn.PrintMsgSuccessV2(rs);\n                    navigate(`/tools/tasks/projects/${projectKey}/codeManage/document/${folderKey}/apis/${rs.data.key}`);\n                }\n            })\n            .finally(() => setIsLoading(false));\n    }\n\n    function edit(bodyReq: any) {\n        ApiDocService.GetDetail(projectKey, folderKey, key)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    bodyReq = Fn.GetTimestampV2(rs, bodyReq);\n                    ApiDocService.Edit(projectKey, folderKey, key, bodyReq)\n                        .then((rs: any) => {\n                            if (rs.isSuccess) {\n                                Fn.PrintMsgSuccessV2(rs);\n                            }\n                        })\n                        .finally(() => setIsLoading(false));\n                } else setIsLoading(false);\n            })\n    }\n\n    function handleDelete() {\n        Swal.fire(\"Xác nhận xóa\", \"Bạn có muốn xóa dữ liệu không?\", \"question\")\n            .then((result) => {\n                if (result.isConfirmed) {\n                    doDelete();\n                }\n            });\n    }\n\n    function doDelete() {\n        setIsLoading(true);\n        ApiDocService.GetDetail(projectKey, folderKey, key)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    ApiDocService.Delete(projectKey, folderKey, key, Fn.GetTimestampV2(rs))\n                        .then((rs: any) => {\n                            if (rs.isSuccess) {\n                                Fn.PrintMsgSuccessV2(rs);\n                                navigate(`/tools/tasks/projects/${projectKey}/codeManage/document?folder=${folderKey}`);\n                            }\n                        })\n                }\n            })\n    }\n\n    return (\n        <MyBox\n            title={key !== undefined ? \"Chi tiết API\" : \"Thêm mới API\"}>\n            <Form\n                layout=\"vertical\"\n                onSubmitCapture={handleSubmitForm}>\n                <MyFormItem.Input\n                    label=\"Tên\"\n                    value={name}\n                    setValue={setName} />\n\n                <MyFormItem.Select\n                    label=\"Phương thức\"\n                    options={options}\n                    value={method}\n                    setValue={setMethod} />\n\n                <MyFormItem.Input\n                    label=\"URL\"\n                    value={url}\n                    setValue={setUrl} />\n\n                <HeaderComponent\n                    data={headers}\n                    setData={setHeaders} />\n\n                <MyFormItem.TextArea\n                    label=\"Body\"\n                    value={body}\n                    setValue={(value: string) => {\n                        handleOnChangeBody(value);\n                    }} />\n\n                <MyFormItem.TextArea\n                    label=\"Script lưu biến \"\n                    value={varReplace}\n                    setValue={setVarReplace} />\n\n                <MyButton\n                    htmlType=\"submit\"\n                    isLoading={isLoading}\n                    type=\"success\"\n                    value={key === undefined ? \"Thêm mới\" : \"Chỉnh sửa\"} />\n\n                <MyButton\n                    type=\"danger\"\n                    isLoading={isLoading}\n                    onClick={handleDelete}\n                    disabled={key === undefined}\n                    value=\"Xóa\" />\n            </Form>\n\n            <ExecuteApiComponent\n                isLoading={isLoading}\n                setIsLoading={setIsLoading}\n                projectKey={projectKey}\n                folderKey={folderKey}\n                apiKey={key} />\n        </MyBox>\n    )\n}"],"names":["JsonViewerComponent","props","name","enableClipboard","displayDataTypes","src","data","theme","ViewResponseComponent","useState","setData","projectKey","folderKey","apiKey","visible","setVisible","isLoading","setIsLoading","loadDataDetail","useCallback","ApiDocResponseService","then","rs","isSuccess","pagedData","handleClickDelete","key","Swal","title","text","isConfirmed","Fn","finally","DoDelete","useEffect","size","open","onClose","map","index","span","Text","value","style","textAlign","MyButton","type","onClick","responses","ExecuteApiComponent","statusCode","setStatusCode","response","setResponse","ApiDocService","console","log","result","disabled","input","preConfirm","body","saveResponse","ModifyApiDocComponent","useParams","navigate","useNavigate","headers","setHeaders","setName","method","setMethod","url","setUrl","setBody","varReplace","setVarReplace","bodyObj","setBodyObj","loadData","undefined","row","JSON","stringify","handleOnChangeBody","str","parse","e","isJSON","filterArray","t","filter","obj","MyBox","layout","onSubmitCapture","bodyReq","add","edit","label","setValue","options","HeaderComponent","htmlType"],"sourceRoot":""}