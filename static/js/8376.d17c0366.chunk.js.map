{"version":3,"file":"static/js/8376.d17c0366.chunk.js","mappings":"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","sources":["components/tool/task/sprintManage/DetailComponent.tsx"],"sourcesContent":["import { Col, Drawer, Form, Row } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Fn } from \"../../../../helper/function\";\r\nimport { TaskSprintManageService } from \"../../../../services/taskService\";\r\nimport { MyFormItem } from \"../../../core/Input\";\r\nimport { MyButton } from \"../../../core/MyButton\";\r\nimport { ProjectStatusComponent } from \"../ProjectStatusComponent\";\r\n\r\nexport default function ModifyComponent(props: any) {\r\n    const [name, setName] = useState('');\r\n    const [dateFrom, setDateFrom] = useState(moment());\r\n    const [dateTo, setDateTo] = useState(moment());\r\n    const [status, setStatus] = useState();\r\n    const { projectKey, keyData, setKeyData, isLoading, setIsLoading, visible, setVisible, loadData } = props;\r\n\r\n    let loadDataDetail = useCallback(() => {\r\n        if (keyData !== undefined) {\r\n            setIsLoading(true);\r\n            TaskSprintManageService.GetDetail(projectKey, keyData)\r\n                .then((rs: any) => {\r\n                    if (rs.isSuccess) {\r\n                        let row = rs.data;\r\n                        setName(row.name);\r\n                        setDateFrom(moment(row.dateFrom));\r\n                        setDateTo(moment(row.dateTo));\r\n                        setStatus(row.status.id);\r\n                    }\r\n                })\r\n                .finally(() => setIsLoading(false))\r\n        }\r\n    }, [projectKey, keyData, setIsLoading])\r\n\r\n    useEffect(() => {\r\n        loadDataDetail();\r\n    }, [loadDataDetail]);\r\n\r\n    function HandleOnClose() {\r\n        setVisible(false);\r\n        setName('');\r\n        setDateFrom(moment());\r\n        setDateTo(moment());\r\n\r\n        if (setKeyData !== undefined) {\r\n            setKeyData(undefined);\r\n        }\r\n    }\r\n\r\n    function HandleSubmitForm() {\r\n        let body = {\r\n            name: name,\r\n            dateFrom: dateFrom.format(\"yyyy-MM-DD\"),\r\n            dateTo: dateTo.format(\"yyyy-MM-DD\"),\r\n            status: status\r\n        };\r\n\r\n        setIsLoading(true);\r\n\r\n        if (keyData !== undefined) {\r\n            Edit(body);\r\n        } else {\r\n            Add(body);\r\n        }\r\n    }\r\n\r\n    function Add(body: any) {\r\n        TaskSprintManageService.Add(projectKey, body)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    Fn.PrintMsgSuccess(rs);\r\n                    HandleOnClose();\r\n                    loadData();\r\n                }\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n\r\n    function Edit(body: any) {\r\n        TaskSprintManageService.GetDetail(projectKey, keyData)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    body = Fn.GetTimestamp(rs, body);\r\n                    TaskSprintManageService.Edit(projectKey, keyData, body)\r\n                        .then((rs: any) => {\r\n                            if (rs.isSuccess) {\r\n                                Fn.PrintMsgSuccess(rs);\r\n                                HandleOnClose();\r\n                                loadData();\r\n                            }\r\n                        })\r\n                        .finally(() => setIsLoading(false))\r\n                } else setIsLoading(false);\r\n            })\r\n    }\r\n\r\n    function handleDeleteSprint() {\r\n        Swal.fire({\r\n            title: \"Xác nhận xóa\",\r\n            text: \"Bạn có muốn xóa sprint này không?\",\r\n            showDenyButton: true,\r\n            confirmButtonText: \"Có\",\r\n            denyButtonText: \"Không\",\r\n        }).then((result: any) => {\r\n            if (result.isConfirmed) {\r\n                doDeleteSprint()\r\n            }\r\n        })\r\n    }\r\n\r\n    function doDeleteSprint() {\r\n        setIsLoading(true);\r\n        TaskSprintManageService.GetDetail(projectKey, keyData)\r\n            .then((rs: any) => {\r\n                if (rs.isSuccess) {\r\n                    TaskSprintManageService.Delete(projectKey, keyData, Fn.GetTimestamp(rs))\r\n                        .then((rs: any) => {\r\n                            if (rs.isSuccess) {\r\n                                Fn.PrintMsgSuccess(rs);\r\n                                HandleOnClose();\r\n                                loadData();\r\n                            }\r\n                        })\r\n                        .finally(() => setIsLoading(false))\r\n                } else setIsLoading(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title=\"Chi tiết\"\r\n            open={visible}\r\n            onClose={HandleOnClose}>\r\n\r\n            <Form layout=\"vertical\" onSubmitCapture={HandleSubmitForm}>\r\n                <MyFormItem.Input\r\n                    label=\"Tên giai đoạn\"\r\n                    value={name}\r\n                    setValue={setName} />\r\n\r\n                <MyFormItem.DatePicker\r\n                    label=\"Ngày bắt đầu\"\r\n                    value={dateFrom}\r\n                    setValue={setDateFrom} />\r\n\r\n                <MyFormItem.DatePicker\r\n                    label=\"Ngày kết thúc\"\r\n                    value={dateTo}\r\n                    setValue={setDateTo} />\r\n\r\n                <ProjectStatusComponent\r\n                    label=\"Trạng thái\"\r\n                    projectKey={projectKey}\r\n                    type={2}\r\n                    value={status}\r\n                    setValue={setStatus} />\r\n\r\n                <Row gutter={24}>\r\n                    <Col span=\"12\">\r\n                        <MyButton\r\n                            isLoading={isLoading}\r\n                            htmlType=\"submit\"\r\n                            type=\"success\"\r\n                            value={keyData !== undefined ? \"Chỉnh sửa\" : \"Thêm mới\"} />\r\n                    </Col>\r\n                    <Col>\r\n                        <MyButton\r\n                            isLoading={isLoading}\r\n                            type=\"danger\"\r\n                            disabled={keyData === undefined}\r\n                            onClick={handleDeleteSprint}\r\n                            value=\"Xóa sprint\" />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Link to={`/tools/tasks/projects/${projectKey}/sprint/${keyData}/toDoList`}>\r\n                    Quản lý việc cần làm\r\n                </Link>\r\n            </Form>\r\n        </Drawer>\r\n    );\r\n}"],"names":["ModifyComponent","props","useState","name","setName","moment","dateFrom","setDateFrom","dateTo","setDateTo","status","setStatus","projectKey","keyData","setKeyData","isLoading","setIsLoading","visible","setVisible","loadData","loadDataDetail","useCallback","undefined","TaskSprintManageService","then","rs","isSuccess","row","data","id","finally","HandleOnClose","useEffect","title","open","onClose","layout","onSubmitCapture","body","format","Fn","Edit","Add","label","value","setValue","type","gutter","span","htmlType","disabled","onClick","Swal","text","showDenyButton","confirmButtonText","denyButtonText","result","isConfirmed","to"],"sourceRoot":""}