{"version":3,"file":"static/js/376.f09b4794.chunk.js","mappings":"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","sources":["components/tool/task/sprintManage/DetailComponent.tsx"],"sourcesContent":["import { Col, Drawer, Form, Row } from \"antd\";\nimport moment from \"moment\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport { Fn } from \"../../../../helper/function\";\nimport { TaskSprintManageService } from \"../../../../services/taskService\";\nimport { MyFormItem } from \"../../../core/Input\";\nimport { MyButton } from \"../../../core/MyButton\";\nimport { ProjectStatusComponent } from \"../ProjectStatusComponent\";\n\nexport default function ModifyComponent(props: any) {\n    const [name, setName] = useState('');\n    const [dateFrom, setDateFrom] = useState(moment());\n    const [dateTo, setDateTo] = useState(moment());\n    const [status, setStatus] = useState();\n    const { setIsLoading } = props;\n\n    let loadData = useCallback(() => {\n        if (props.keyData !== undefined) {\n            setIsLoading(true);\n            TaskSprintManageService.GetDetail(props.projectKey, props.keyData)\n                .then((rs: any) => {\n                    if (rs.isSuccess) {\n                        let row = rs.data;\n                        setName(row.name);\n                        setDateFrom(moment(row.dateFrom));\n                        setDateTo(moment(row.dateTo));\n                        setStatus(row.status.id);\n                    }\n                })\n                .finally(() => setIsLoading(false))\n        }\n    }, [props.projectKey, props.keyData, setIsLoading])\n\n    useEffect(() => {\n        loadData();\n    }, [loadData]);\n\n    function HandleOnClose() {\n        props.setVisible(false);\n        setName('');\n        setDateFrom(moment());\n        setDateTo(moment());\n\n        if (props.setKeyData !== undefined) {\n            props.setKeyData(undefined);\n        }\n    }\n\n    function HandleSubmitForm() {\n        let body = {\n            name: name,\n            dateFrom: dateFrom.format(\"yyyy-MM-DD\"),\n            dateTo: dateTo.format(\"yyyy-MM-DD\"),\n            status: status\n        };\n\n        setIsLoading(true);\n\n        if (props.keyData !== undefined) {\n            Edit(body);\n        } else {\n            Add(body);\n        }\n    }\n\n    function Add(body: any) {\n        TaskSprintManageService.Add(props.projectKey, body)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    Fn.PrintMsgSuccessV2(rs);\n                    HandleOnClose();\n                    props.loadData();\n                }\n            })\n            .finally(() => setIsLoading(false));\n    }\n\n    function Edit(body: any) {\n        TaskSprintManageService.GetDetail(props.projectKey, props.keyData)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    body = Fn.GetTimestampV2(rs, body);\n                    TaskSprintManageService.Edit(props.projectKey, props.keyData, body)\n                        .then((rs: any) => {\n                            if (rs.isSuccess) {\n                                Fn.PrintMsgSuccessV2(rs);\n                                HandleOnClose();\n                                props.loadData();\n                            }\n                        })\n                        .finally(() => setIsLoading(false))\n                } else setIsLoading(false);\n            })\n    }\n\n    function handleDeleteSprint() {\n        Swal.fire({\n            title: \"Xác nhận xóa\",\n            text: \"Bạn có muốn xóa sprint này không?\",\n            showDenyButton: true,\n            confirmButtonText: \"Có\",\n            denyButtonText: \"Không\",\n        }).then((result: any) => {\n            if (result.isConfirmed) {\n                doDeleteSprint()\n            }\n        })\n    }\n\n    function doDeleteSprint() {\n        props.setIsLoading(true);\n        TaskSprintManageService.GetDetail(props.projectKey, props.keyData)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    TaskSprintManageService.Delete(props.projectKey, props.keyData, Fn.GetTimestampV2(rs))\n                        .then((rs: any) => {\n                            if (rs.isSuccess) {\n                                Fn.PrintMsgSuccessV2(rs);\n                                HandleOnClose();\n                                props.loadData();\n                            }\n                        })\n                        .finally(() => setIsLoading(false))\n                } else setIsLoading(false);\n            })\n    }\n    \n    return (\n        <Drawer\n            title=\"Chi tiết\"\n            open={props.visible}\n            onClose={HandleOnClose}>\n\n            <Form layout=\"vertical\" onSubmitCapture={HandleSubmitForm}>\n                <MyFormItem.Input\n                    label=\"Tên giai đoạn\"\n                    value={name}\n                    setValue={setName} />\n\n                <MyFormItem.DatePicker\n                    label=\"Ngày bắt đầu\"\n                    value={dateFrom}\n                    setValue={setDateFrom} />\n\n                <MyFormItem.DatePicker\n                    label=\"Ngày kết thúc\"\n                    value={dateTo}\n                    setValue={setDateTo} />\n\n                <ProjectStatusComponent\n                    label=\"Trạng thái\"\n                    projectKey={props.projectKey}\n                    type={2}\n                    value={status}\n                    setValue={setStatus} />\n\n                <Row gutter={24}>\n                    <Col span=\"12\">\n                        <MyButton\n                            isLoading={props.isLoading}\n                            htmlType=\"submit\"\n                            type=\"success\"\n                            value={props.keyData !== undefined ? \"Chỉnh sửa\" : \"Thêm mới\"} />\n                    </Col>\n                    <Col>\n                        <MyButton\n                            isLoading={props.isLoading}\n                            type=\"danger\"\n                            disabled={props.keyData === undefined}\n                            onClick={handleDeleteSprint}\n                            value=\"Xóa sprint\" />\n                    </Col>\n                </Row>\n\n                <Link to={`/tools/tasks/projects/${props.projectKey}/sprint/${props.keyData}/toDoList`}>Quản lý việc cần làm</Link>\n            </Form>\n        </Drawer>\n    );\n}"],"names":["ModifyComponent","props","useState","name","setName","moment","dateFrom","setDateFrom","dateTo","setDateTo","status","setStatus","setIsLoading","loadData","useCallback","undefined","keyData","TaskSprintManageService","projectKey","then","rs","isSuccess","row","data","id","finally","HandleOnClose","setVisible","setKeyData","useEffect","title","open","visible","onClose","layout","onSubmitCapture","body","format","Fn","Edit","Add","label","value","setValue","type","gutter","span","isLoading","htmlType","disabled","onClick","Swal","text","showDenyButton","confirmButtonText","denyButtonText","result","isConfirmed","to"],"sourceRoot":""}