{"version":3,"file":"static/js/814.ce6c5de9.chunk.js","mappings":"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","sources":["components/core/UI_FormatComponent.tsx","components/manage/storedManage/IndexComponent.tsx"],"sourcesContent":["import moment from \"moment\";\n\nexport function UIFormatDateVNComponent(props: any) {\n    let dateStr = \"\";\n    if (props.value !== undefined && props.value !== '' && props.value !== null) {\n        dateStr = moment(props.value).format(\"DD/MM/YYYY\");\n    } else {\n        dateStr = \"\";\n    }\n\n    return (\n        <span>{dateStr}</span>\n    );\n}\n\nexport function UIFormatDateTimeVNComponent(props: any) {\n    let dateStr = \"\";\n    if (props.value !== undefined && props.value !== '' && props.value !== null) {\n        dateStr = moment(props.value).format(\"DD/MM/YYYY HH:mm:ss\");\n    } else {\n        dateStr = \"\";\n    }\n\n    return (\n        <span>{dateStr}</span>\n    );\n}","import { Button, message, Popconfirm, Tag } from \"antd\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Fn } from \"../../../helper/function\";\nimport { PaginationRequest, TableColumn } from \"../../../models/baseModel\";\nimport { StoredManageService } from \"../../../services/adminService\";\nimport { OrderByModel, PageInfoModel } from \"../../core/TableModel\";\nimport TableComponent from \"../../core/TableNewComponent\";\nimport { UIFormatDateTimeVNComponent } from \"../../core/UI_FormatComponent\";\n\nexport default function ManageStoredManageIndexComponent() {\n    const column = [\n        new TableColumn({ title: \"STT\", dataIndex: \"stt\", key: \"stt\", disabled: true }),\n        new TableColumn({ title: \"Tên\", dataIndex: \"name\", key: \"name\" }),\n        new TableColumn({\n            title: \"Trạng thái\", dataIndex: \"status\", key: \"status\", render: (el: number) => {\n                let value = \"\";\n                let color = \"blue\";\n                if (el === 0) {\n                    value = \"Developing\";\n                    color = \"green\";\n                }\n\n                if (el === 1) {\n                    value = \"Đã deploy\";\n                    color = \"blue\";\n                }\n\n                if (el === 2) {\n                    value = \"Đang fix\";\n                    color = \"yellow\";\n                }\n\n                if (el === -1) {\n                    value = \"Đã xóa\";\n                    color = \"red\";\n                }\n                return (\n                    <Tag color={color}>{value}</Tag>\n                )\n            }\n        }),\n        new TableColumn({\n            title: \"Ngày deploy Dev\", key: \"dateDeployDev\", dataIndex: \"dateDeployDev\", render: (row: string) => {\n                return (<UIFormatDateTimeVNComponent value={row} />);\n            }\n        }),\n        new TableColumn({\n            title: \"Ngày deploy Product\", key: \"dateDeployProduct\", dataIndex: \"dateDeployProduct\", render: (row: string) => {\n                return (<UIFormatDateTimeVNComponent value={row} />);\n            }\n        }),\n        new TableColumn({\n            title: \"Hành động\", key: \"action\", dataIndex: \"action\", render: (row: string, data: any) => {\n                return (\n                    <div>\n                        <Button type=\"link\">\n                            <Link to={`/admin/storedManage/edit/${data.key}`}>Chỉnh sửa</Link>\n                        </Button>\n\n                        <Popconfirm\n                            title=\"Are you sure to delete this stored?\"\n                            onConfirm={() => {\n                                handleClickDeleteStored(data.key);\n                            }}>\n                            <Button type=\"link\">\n                                Xóa\n                            </Button>\n                        </Popconfirm>\n                    </div>\n                );\n            }\n        }),\n    ];\n\n    const [orderBy, setOrderBy] = useState<OrderByModel>(new OrderByModel());\n    const [pageInfo, setPageInfo] = useState<PageInfoModel>(new PageInfoModel());\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [data, setData] = useState([]);\n\n    const loadData = useCallback(() => {\n        setIsLoading(true);\n        var paginationRequest = new PaginationRequest(pageInfo.pageNumber, pageInfo.pageSize, orderBy);\n        StoredManageService.GetList(paginationRequest, (data: any) => {\n            setPageInfo(new PageInfoModel(data));\n            let row = data.data.data.pagedData.map((data: any, index: number) => {\n                return {\n                    key: data.key,\n                    stt: index + 1,\n                    name: data.name,\n                    status: data.status,\n                    dateDeployDev: data.dateDeployDev,\n                    dateDeployProduct: data.dateDeployProduct\n                };\n            })\n            setData(row);\n        }, undefined, () => {\n            setIsLoading(false);\n        })\n    }, [pageInfo.pageNumber, pageInfo.pageSize, orderBy]);\n\n    useEffect(() => {\n        loadData();\n    }, [loadData]);\n\n    function handleClickDeleteStored(key: string) {\n        setIsLoading(true);\n        StoredManageService.GetDetail(key, (data: any) => {\n            StoredManageService.Delete(key, Fn.GetTimestamp(data), (data: any) => {\n                message.success(data.data.message);\n                loadData();\n            }, () => {\n                setIsLoading(false);\n            })\n        }, () => {\n            setIsLoading(false);\n        })\n    }\n\n    return (\n        <div>\n            <Button><Link to=\"/admin/storedManage/add\">Thêm mới</Link></Button>\n            <Button><Link to=\"/admin/storedManage/linkStored\">Liên kết stored</Link></Button>\n            <TableComponent\n                orderBy={orderBy}\n                setOrderBy={setOrderBy}\n                pageInfo={pageInfo}\n                setPageInfo={setPageInfo}\n                column={column}\n                dataSource={data}\n                loading={isLoading}\n                loadData={loadData}/>\n        </div>\n    );\n}"],"names":["UIFormatDateVNComponent","props","dateStr","undefined","value","moment","format","UIFormatDateTimeVNComponent","ManageStoredManageIndexComponent","column","TableColumn","title","dataIndex","key","disabled","render","el","color","row","data","type","to","onConfirm","setIsLoading","StoredManageService","Fn","message","loadData","useState","OrderByModel","orderBy","setOrderBy","PageInfoModel","pageInfo","setPageInfo","isLoading","setData","useCallback","paginationRequest","PaginationRequest","pageNumber","pageSize","pagedData","map","index","stt","name","status","dateDeployDev","dateDeployProduct","useEffect","dataSource","loading"],"sourceRoot":""}