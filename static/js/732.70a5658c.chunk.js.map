{"version":3,"file":"static/js/732.70a5658c.chunk.js","mappings":"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","sources":["components/tool/test/JsonViewerComponent.tsx","components/tool/task/workflow/document/ExecuteApiComponent.tsx","components/tool/task/workflow/document/ModifyApiDocComponent.tsx"],"sourcesContent":["import ReactJson from \"react-json-view\";\n\nexport default function JsonViewerComponent(props: any) {\n\n    return (\n        <div>\n            <ReactJson\n                name={null}\n                enableClipboard={false}\n                displayDataTypes={false}\n                src={props.data}\n                theme=\"ashes\" />\n        </div>\n    )\n}","import { useState } from \"react\";\nimport { ApiDocService } from \"../../../../../services/taskService\";\nimport { Box } from \"../../../../core/MyBox\";\nimport { MyButton } from \"../../../../core/MyButton\";\nimport JsonViewerComponent from \"../../../test/JsonViewerComponent\";\nimport \"../../task.css\";\n\nexport default function ExecuteApiComponent(props: any) {\n    const { projectKey, folderKey, apiKey } = props;\n    const [statusCode, setStatusCode] = useState('');\n    const [response, setResponse] = useState({});\n\n    const { isLoading, setIsLoading } = props;\n\n    function OnClickExec() {\n        setIsLoading(true);\n        ApiDocService.ExecApi(projectKey, folderKey, apiKey)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    console.log(rs.data);\n                    setStatusCode(rs.data.result.statusCode);\n                    setResponse(rs.data.result.data);\n                }\n            })\n            .finally(() => setIsLoading(false));\n    }\n\n    return (\n        <Box>\n            <MyButton\n                isLoading={isLoading}\n                value=\"Cháº¡y APi\"\n                type=\"warning\"\n                onClick={OnClickExec}\n            />\n            <p>Status code: {statusCode}</p>\n            <pre>\n                <JsonViewerComponent data={response} />\n            </pre>\n        </Box>\n    );\n}","import { Form } from \"antd\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport { Fn } from \"../../../../../helper/function\";\nimport { ApiDocService } from \"../../../../../services/taskService\";\nimport { MyFormItem } from \"../../../../core/Input\";\nimport { MyBox } from \"../../../../core/MyBox\";\nimport { MyButton } from \"../../../../core/MyButton\";\nimport ExecuteApiComponent from \"./ExecuteApiComponent\";\nimport HeaderComponent from \"./HeaderComponent\";\n\nexport default function ModifyApiDocComponent(props: any) {\n    const key = useParams().key;\n    const projectKey = useParams().projectKey;\n    const folderKey = useParams().folderKey;\n    const navigate = useNavigate();\n    const [headers, setHeaders] = useState([]);\n    const [name, setName] = useState('');\n    const [method, setMethod] = useState(1);\n    const [url, setUrl] = useState('');\n    const [body, setBody] = useState<string>('');\n    const [varReplace, setVarReplace] = useState();\n    const [isLoading, setIsLoading] = useState(false);\n\n    const options = [\n        {\n            value: 1,\n            label: \"Get\"\n        },\n        {\n            value: 2,\n            label: \"Post\"\n        },\n        {\n            value: 3,\n            label: \"Put\"\n        },\n        {\n            value: 4,\n            label: \"Delete\"\n        }\n    ]\n\n    const [bodyObj, setBodyObj] = useState();\n\n    function isJSON(str: string) {\n        try {\n            return (JSON.parse(str) && !!str);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    const loadData = useCallback(() => {\n        if (key !== undefined) {\n            setIsLoading(true);\n            ApiDocService.GetDetail(projectKey, folderKey, key)\n                .then((rs: any) => {\n                    if (rs.isSuccess) {\n                        let row = rs.data;\n                        setHeaders(row.headers);\n                        setName(row.name);\n                        setMethod(row.method);\n                        setUrl(row.url);\n                        setVarReplace(row.varReplace);\n                        setBody(row.body === null ? \"\" : JSON.stringify(row.body));\n                        setBodyObj(row.body);\n                    }\n                })\n                .finally(() => setIsLoading(false));\n        }\n    }, [projectKey, folderKey, key, setIsLoading])\n\n    useEffect(() => {\n        loadData();\n    }, [loadData])\n\n    function handleOnChangeBody(value: string) {\n        if (isJSON(value)) {\n            setBodyObj(JSON.parse(value));\n        }\n        setBody(value);\n    }\n\n    function filterArray() {\n        var t = headers;\n\n        t = t.filter((obj: any) => {\n            return (obj !== undefined && obj.key !== '');\n        })\n\n        return t;\n    }\n\n    function handleSubmitForm() {\n        setIsLoading(true);\n        let bodyReq = {\n            name: name,\n            headers: filterArray(),\n            url: url,\n            method: method,\n            varReplace: varReplace,\n            body: bodyObj\n        };\n\n        if (key === undefined) {\n            add(bodyReq);\n        } else {\n            edit(bodyReq);\n        }\n    }\n\n    function add(bodyReq: any) {\n        ApiDocService.Add(projectKey, folderKey, bodyReq)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    Fn.PrintMsgSuccessV2(rs);\n                    navigate(`/tools/tasks/projects/${projectKey}/codeManage/document/${folderKey}/apis/${rs.data.key}`);\n                }\n            })\n    }\n\n    function edit(bodyReq: any) {\n        ApiDocService.GetDetail(projectKey, folderKey, key)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    bodyReq = Fn.GetTimestampV2(rs, bodyReq);\n                    ApiDocService.Edit(projectKey, folderKey, key, bodyReq)\n                        .then((rs: any) => {\n                            if (rs.isSuccess) {\n                                Fn.PrintMsgSuccessV2(rs);\n                            }\n                        })\n                        .finally(() => setIsLoading(false));\n                } else setIsLoading(false);\n            })\n    }\n\n    function handleDelete() {\n        Swal.fire(\"XÃ¡c nháº­n xÃ³a\", \"Báº¡n cÃ³ muá»n xÃ³a dá»¯ liá»u khÃ´ng?\", \"question\")\n            .then((result) => {\n                if (result.isConfirmed) {\n                    doDelete();\n                }\n            });\n    }\n\n    function doDelete() {\n        setIsLoading(true);\n        ApiDocService.GetDetail(projectKey, folderKey, key)\n            .then((rs: any) => {\n                if (rs.isSuccess) {\n                    ApiDocService.Delete(projectKey, folderKey, key, Fn.GetTimestampV2(rs))\n                        .then((rs: any) => {\n                            if (rs.isSuccess) {\n                                Fn.PrintMsgSuccessV2(rs);\n                                navigate(`/tools/tasks/projects/${projectKey}/codeManage/document?folder=${folderKey}`);\n                            }\n                        })\n                }\n            })\n    }\n\n    return (\n        <MyBox\n            title={key !== undefined ? \"Chi tiáº¿t API\" : \"ThÃªm má»i API\"}>\n            <Form\n                layout=\"vertical\"\n                onSubmitCapture={handleSubmitForm}>\n                <MyFormItem.Input\n                    label=\"TÃªn\"\n                    value={name}\n                    setValue={setName} />\n\n                <MyFormItem.Select\n                    label=\"PhÆ°Æ¡ng thá»©c\"\n                    options={options}\n                    value={method}\n                    setValue={setMethod} />\n\n                <MyFormItem.Input\n                    label=\"URL\"\n                    value={url}\n                    setValue={setUrl} />\n\n                <HeaderComponent\n                    data={headers}\n                    setData={setHeaders} />\n\n                <MyFormItem.TextArea\n                    label=\"Body\"\n                    value={body}\n                    setValue={(value: string) => {\n                        handleOnChangeBody(value);\n                    }} />\n\n                <MyFormItem.TextArea\n                    label=\"Script lÆ°u biáº¿n \"\n                    value={varReplace}\n                    setValue={setVarReplace} />\n\n                <MyButton\n                    htmlType=\"submit\"\n                    isLoading={isLoading}\n                    type=\"success\"\n                    value={key === undefined ? \"ThÃªm má»i\" : \"Chá»nh sá»­a\"} />\n\n                <MyButton\n                    type=\"danger\"\n                    isLoading={isLoading}\n                    onClick={handleDelete}\n                    disabled={key === undefined}\n                    value=\"XÃ³a\" />\n            </Form>\n\n            <ExecuteApiComponent\n                isLoading={isLoading}\n                setIsLoading={setIsLoading}\n                projectKey={projectKey}\n                folderKey={folderKey}\n                apiKey={key} />\n        </MyBox>\n    )\n}"],"names":["JsonViewerComponent","props","name","enableClipboard","displayDataTypes","src","data","theme","ExecuteApiComponent","projectKey","folderKey","apiKey","useState","statusCode","setStatusCode","response","setResponse","isLoading","setIsLoading","MyButton","value","type","onClick","ApiDocService","then","rs","isSuccess","console","log","result","finally","ModifyApiDocComponent","key","useParams","navigate","useNavigate","headers","setHeaders","setName","method","setMethod","url","setUrl","body","setBody","varReplace","setVarReplace","bodyObj","setBodyObj","loadData","useCallback","undefined","row","JSON","stringify","handleOnChangeBody","str","parse","e","isJSON","filterArray","t","filter","obj","useEffect","MyBox","title","layout","onSubmitCapture","bodyReq","Fn","add","edit","label","setValue","options","HeaderComponent","setData","htmlType","Swal","isConfirmed","disabled"],"sourceRoot":""}